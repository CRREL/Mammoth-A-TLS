#!/bin/bash

# Set pathing to work from any user
if [ ~ == "/root" ]; then
  PATH_PREFIX=~/../home/mammoth/Mammoth
else
 # accessed via sudo perms or mammoth user
 PATH_PREFIX=~/Mammoth
fi

# establish directories we will be using based on user account
SCAN_DIR=$PATH_PREFIX/Scans
SNOW_VAR=$PATH_PREFIX/Scripts/Vars/snowing
SPHERE_1=$PATH_PREFIX/Scripts/PDAL/snow-sphere.json
SPHERE_2=$PATH_PREFIX/Scripts/PDAL/snow-sphere-2.json
lidarcollect=$PATH_PREFIX/LidarCollect/build/LidarCollect
CONDA=$PATH_PREFIX/Miniconda3/etc/profile.d/conda.sh

#extract scanner power status
$PATH_PREFIX/Scripts/GPIO/scanner_status
PWR_VAL=$?

# Switch the power to on, for the scanner, if necessary.
if [ $PWR_VAL = "1" ]; then
    $PATH_PREFIX/Scripts/GPIO/scanner_poweron
fi

# Change to the directory where file scans are to be stored to
cd $SCAN_DIR

# Conduct a basic frame scan
$lidarcollect --ip 192.168.0.128 --frame 1 30 130 0.04 80 280 0.04

# Initialize the PDAL environment for scan processing
source $CONDA
conda activate pdal

# Use PDAL to determine the number of points within two different spheres
filename=$(ls -t *frame.rxp | head -1)
snowcount=$(pdal pipeline $SPHERE_1 --metadata=stdout --readers.rxp.filename=$filename | jq '.stages["filters.stats"].statistic [].count')
snowcount2=$(pdal pipeline $SPHERE_2 --metadata=stdout --readers.rxp.filename=$filename | jq '.stages["filters.stats"].statistic [].count')

# Determine if there are enough points to declare a snowfall event.
if [ $snowcount -gt 15 ] && [ $snowcount2 -gt 15 ]; then
  echo 1 >$SNOW_VAR
  echo "[FRAME]: Snowing, starting line scan"
  $PATH_PREFIX/Scripts/Scans/line
else
  echo 0 >$SNOW_VAR
  echo "[FRAME]: No Snow"
fi
